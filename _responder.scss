// Responsive tools
// Requirements: _scale.scss

$breakpoints: (
  A: 25rem,
  B: 35rem,
  C: 45rem,
) !default;

// Build classes to show or hide via media query
@each $label, $breakpoint in $breakpoints {
  @media (min-width: unitConvertor($breakpoint)) {
    .hide#{$label} {
      display: none !important;
    }
  }
  @media (max-width: unitConvertor($breakpoint)) {
    .show#{$label} {
      display: none !important;
    }
  }
}

@mixin media-query ($operator, $breakpoint){
  //NOTE is defining variables outside the if statement necessary?
  $query-separator: "";
  $media-query: null;

  //Detect if $breakpoint is not a measurement, then find if it in the $breakpoints list
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint:  map-get($breakpoints, $breakpoint);
  } @elseif type-of($breakpoint) == "number" and unitless($breakpoint) == true {
    $breakpoint: nth(map_values($breakpoints), $breakpoint);
  }

  @if str-index($operator, '>') != null {
    @if $media-query != null {
      $query-separator: ", "
    }
    $media-query: $query-separator + "(min-width: #{unitConvertor($breakpoint)})";
  }
  @if str-index($operator, '<') != null {
    @if $media-query != null {
      $query-separator: ", "
    }
    $media-query: $query-separator + "(max-width: #{unitConvertor($breakpoint)})";
  }
  @if str-index($operator, '=') != null {
    @if $media-query != null {
      $query-separator: ", "
    }
    $media-query: $query-separator + "(width: #{unitConvertor($breakpoint)})";
  }
  @media #{$media-query} {
    @content;
  }
}
