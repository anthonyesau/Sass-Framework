//Sliding scale through media queries

//Define ranges for sliding variables (must be minimum to maximum)
$type-base-range: 100% 131.25% !default; //
$exponential-scale-range: 1.333 1.618 !default;
$screen-range: 30rem 80rem !default;

//Define non-sliding variables
$type-base: 131.25% !default;
$exponential-scale: 1.618 !default;

//Operational settings
$increments: 5 !default;
//if unitless {number of steps (media queries) to calculate sliding changes}
//This includes counting below the lowest number in the range as a step
//as well as the highest number in the range  and above as a step
//if units included {use distance for increments instead, must be same unit as screen-range}
//TODO measurement base increments need to be ironed out (vary increments by screen-range distances)
$adjust-root: true !default; //True{change root(html) font-size to base}//false{leave root font-size at default}
$prefered-unit: 1rem !default; //

@if unitless($increments) == false {
  $increments: ceil( ( nth($screen-range, length($screen-range) ) - nth($screen-range, 1) ) / $increments );
}

//Defines and resets global temporary variables
@mixin reset-scale-temps{
  $type-base-temp: $type-base !global;
  $exponential-scale-temp: $exponential-scale !global;
  $offset-temp: .5 !global; //NOTE unnecessary: sets linear scale offset to average the values
}

//exponential scale
@function es($scale-exponent: 0, $base: $type-base-temp, $scale-base: $exponential-scale-temp) {
  @return $base * exponent($scale-base, $scale-exponent);
}


$range-count: true; //NOTE necessary?
$offset-range: true; //NOTE necessary?
//linear scale. only used within the scale mixin
@function ls($value-range, $offset: $offset-temp) {
  //offset must be between 0 and 1
  $range-count: length($value-range) - 1;
  @if $range-count == 0 {
    @return $value-range;
  }
  @if $offset <= 0 {
    @return nth($value-range, 1);
  } @else if $offset >= 1 {
    @return nth($value-range, length($value-range));
  } @else {
    @for $i from 0 through $range-count {
      $offset-range: ($i / $range-count) (($i + 1) / $range-count);
      @if nth($offset-range, 1) <= $offset and nth($offset-range, 2) > $offset {
        $offset: ( $offset - nth($offset-range, 1) ) / ( nth($offset-range, 2) - nth($offset-range, 1) );
        @return nth($value-range, $i + 1) + (( nth($value-range, $i + 2) - nth($value-range, $i + 1)) * $offset);

      }
    }
  }
}

//Be careful with counting points versus segments within the various ranges
//That is the function of all the + and - 1s and 2s
@mixin scale {
  $range-count: $increments - 2;
  @for $i from -1 through $range-count {
    $offset-temp: ( $i + 1 ) / ( $increments - 1 ) !global;
    $exponential-scale-temp: ls($exponential-scale-range, $offset-temp) !global;
    $type-base-temp: ls($type-base-range, ( $i + 1 ) / ( $increments - 1 )) !global;
    $transition1: ls($screen-range, $i / $range-count);
    $transition2: ls($screen-range, ( $i + 1 ) / $range-count);
    @if $i == -1 { //below minimum transition point
      @media (max-width: $transition2) {
        @content;
      }
    } @else if $i < $range-count {
      @media (min-width: $transition1) and (max-width: $transition2) {
        @content;
      }
    } @else { //above maximum transition point
      @media (min-width: $transition1) {
        @content;
      }
    }
  }
  @include reset-scale-temps;
}

//Be careful with counting points versus segments within the various ranges
//That is the function of all the + and - 1s and 2s
@function remConverter($rems) {
  $range-count: $increments - 2;
  @for $i from -1 through $range-count { //TODO make the test run from widest to most narrow screen size
    $offset-temp: ( $i + 1 ) / ( $increments - 1 ) !global;
    $exponential-scale-temp: ls($exponential-scale-range, $offset-temp) !global;
    $type-base-temp: ls($type-base-range, ( $i + 1 ) / ( $increments - 1 )) !global;
    $transition1: ls($screen-range, $i / $range-count);
    $transition2: ls($screen-range, ( $i + 1 ) / $range-count);
    $type-base1-temp: ls($type-base-range-archive, $i / ( $increments - 1 )) !global;
    $type-base2-temp: ls($type-base-range-archive, ( $i + 1 ) / ( $increments - 1 )) !global;
    $type-base: (($type-base2-temp - $type-base1-temp) / $increments * $i + $type-base1-temp);
    $converted-transition1: ($transition2 - $transition1) / $increments * $i + $transition1;
    $converted-transition2: ($transition2 - $transition1) / $increments * ($i + 1) + $transition1;
    $convertedRems: $rems / 1rem * $type-base / 100% * 1rem;
    @debug $type-base;
    @if $convertedRems >= $transition1 and $convertedRems < $transition2 {
      @return $convertedRems;
    }
  }
}

@include reset-scale-temps;
$type-base-range-archive: $type-base-range;
$type-base-archive: $type-base;

@if $adjust-root == true {
  @include scale {
    html {
      font-size: $type-base-temp;
    }
  }
  $type-base-range: $prefered-unit;
  $type-base: $prefered-unit;
}
